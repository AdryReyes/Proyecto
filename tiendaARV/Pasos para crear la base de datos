En settings tener:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'proyectoTienda',
        'USER': os.environ.get('DATABASE_USER'),
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
        'HOST': 'db', 
        'PORT': '5432',
    }
}

En docker-compose.yml:
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: proyectoTienda
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: usuario
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  web:
    build: .
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - ./.env

volumes:
  postgres_data:

En dockerfile:
FROM python:3.12.7-alpine3.20

WORKDIR /app

ENV PYTHONUNBUFFERED=1

RUN apk update \
    && apk add --no-cache gcc musl-dev postgresql-dev python3-dev libffi-dev \
    && pip install --upgrade pip

COPY ./requirements.txt ./

RUN pip install -r requirements.txt

COPY ./ ./

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

Comandos:

docker-compose exec db psql -U usuario -d proyectoTienda  -- Para entrar en el contenedor
/dt -- para mirar la base de datos




docker-compose exec web python manage.py makemigrations  -- actualizar base de datos

docker-compose exec web python manage.py migrate -- hacerlo

docker-compose exec web python manage.py runserver

docker-compose exec web python manage.py makemigrations tienda  --> primera migracion si docker no existe

docker-compose exec web python manage.py createsuperuser  --> Crear super usuario

docker-compose exec web python manage.py migrate captcha  --> Para usar captcha

pip install paypalrestsdk --> no sirve

.env:
SECRET_KEY='django-insecure-f=%5#jp=*oazid97kuvb2w1k%a!f+-^)#yw7%i^rila#&-0mwy'
DEBUG=True
DATABASE_NAME=proyectoTienda
DATABASE_USER=usuario
DATABASE_PASSWORD=usuario
DATABASE_HOST=db
DATABASE_PORT=5432
